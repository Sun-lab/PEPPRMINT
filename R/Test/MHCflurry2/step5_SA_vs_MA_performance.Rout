
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # ---------------------------------------------------------------------------
> # SA vs. PEPPRMINT performance 
> # ---------------------------------------------------------------------------
> 
> library(data.table)
> library(PRROC)
> library(stringr)
> 
> # ---------------------------------------------------------------------------
> # Train data prediction
> # ---------------------------------------------------------------------------
> dirtrain = "../../../results/PEPPRMINT/"
> ma_res = "MA_800_bs_32_lr_0.001_e_10_layer_1_dropout_0.8_new_pi_weight_0.1_decriter_2_split0_Aug2_iter10_train_pred_all.txt.gz"
> ma = fread(paste0(dirtrain, ma_res))
> head(ma)
   sample        hla         peptide y_true y_pred_pMHC    y_pred     p_ijk
1:  Bcell HLA-A01:01 VPNAXXXGXXXRGLV      1   2.176e-06 2.042e-01 4.921e-02
2:  Bcell HLA-A03:01 VPNAXXXGXXXRGLV      1   1.699e-06 3.070e-01 2.483e-01
3:  Bcell HLA-B07:02 VPNAXXXGXXXRGLV      1   8.739e-01 4.897e-01 6.076e-01
4:  Bcell HLA-B27:05 VPNAXXXGXXXRGLV      1   2.647e-04 1.045e-01 9.473e-02
5:  Bcell HLA-C02:02 VPNAXXXGXXXRGLV      1   9.120e-06 7.510e-06 4.299e-07
6:  Bcell HLA-C07:01 VPNAXXXGXXXRGLV      1   1.427e-04 7.183e-04 1.682e-04
   wt_y_pred
1: 1.411e-02
2: 7.119e-02
3: 1.742e-01
4: 2.716e-02
5: 1.233e-07
6: 4.821e-05
> ma$pep_line = paste(ma$peptide, ma$sample, sep = ";")
> ma_max_split = ma[, .(max(y_pred), max(y_pred_pMHC)), by = .(y_true, pep_line)]
> dim(ma_max_split)
[1] 2101684       4
> colnames(ma_max_split)[3:4] = c("y_pred_MA","y_pred_SA")
> 
> # MA data only 
> ma_max_split$cell_line = sub(".*;", "", ma_max_split$pep_line) 
> ma_max_split1 = ma_max_split[which(substr(ma_max_split$cell_line,1,3) != "HLA"),]
> table(ma_max_split1$cell_line)

    Apher1     Apher6      Bcell       CA46      CD165      CM467 Fibroblast 
     26170       8365      46581      12981      27625      38360      25231 
     GD149    HCC1143    HCC1937     HCT116     HEK293      HL-60         JY 
     43728      14618      21665      19281      18147      24558      12756 
    Line.1    Line.10    Line.11    Line.12    Line.13    Line.14    Line.15 
      1213       5186      12509       5737       1545        652       2668 
   Line.16    Line.17    Line.18    Line.19     Line.2    Line.20    Line.21 
      1163       6390       4666        855       2192       9388       4012 
   Line.22    Line.23    Line.24    Line.25    Line.26    Line.27    Line.28 
      7680       3758       1822       9557       1012       1731       2390 
   Line.29     Line.3    Line.30    Line.31    Line.32    Line.33    Line.34 
      8948       7418       1072       8226       1856       3903      13393 
   Line.35    Line.36    Line.37    Line.38    Line.39     Line.4    Line.40 
      1547      12040       2916       9392       7747       5016       9074 
   Line.41    Line.42    Line.43    Line.44    Line.45    Line.46    Line.47 
      5069       1854        313       5207       7221      10895        684 
   Line.48    Line.49     Line.5    Line.50    Line.51    Line.52    Line.53 
      9006       4733       5872       1038       2020        699       6615 
   Line.54    Line.55     Line.6     Line.7     Line.8     Line.9    LNT-229 
      1526       8226       4956       2804       5083       6189      37607 
   MAVER-1      MD155     Mel-12     Mel-15     Mel-16      Mel-5    Mel-624 
     35787      22526      18352      83686      55235      22164      10188 
     Mel-8    pat-AC2      pat-C   pat-CELG    pat-CP2     pat-FL      pat-J 
     25043       6683      10572      15024       7847      15400       9080 
  pat-JPB3    pat-JT2      pat-M     pat-MA     pat-ML    pat-NS2     pat-NT 
      7437       6264      11010      14614      11801       3122      11037 
   pat-PF1      pat-R     pat-RT     pat-SR     pat-ST       PD42      RA957 
     18318      10404      10588      12010       5593      10196      48891 
  RPMI8226   SK-Mel-5       T98G      THP-1       TIL1       TIL3       U-87 
     23456      13753      44872      29328      29028      43098      51072 
> dim(ma_max_split1)
[1] 1399836       5
> 
> #Add # HLA in cell-line 
> allele.list = read.delim(sprintf("%sallelelist.txt", 
+                                  "../../../data/NetMHCpan4_1_train/"), 
+                          header=FALSE, sep = "", fill = TRUE, as.is = TRUE)
> dim(allele.list)
[1] 357   2
> allele.list = unique(allele.list)
> dim(allele.list)
[1] 349   2
> 
> names(allele.list) = c("cell_line", "hla")
> head(allele.list)
  cell_line                                                              hla
1       A10                                        BoLA-3:00201,BoLA-2:01201
2   A11-A11                                        BoLA-3:01701,BoLA-2:01801
3   A12-A15 BoLA-1:01901,BoLA-2:00801,BoLA-1:00901,BoLA-4:02401,BoLA-2:02501
4       A14              BoLA-1:02301,BoLA-4:02401,BoLA-6:04001,BoLA-2:02501
5   A15-A15                           BoLA-1:00901,BoLA-4:02401,BoLA-2:02501
6       A18                                                     BoLA-6:01301
> 
> hla.list = strsplit(allele.list$hla, split=",")
> n.hla    = sapply(hla.list, length)
> table(n.hla)
n.hla
  1   2   3   4   5   6 
236   4  13  13   4  79 
> allele.list$n.hla = n.hla
> 
> ma_max_split2 = merge(ma_max_split1, allele.list, by = "cell_line", 
+                       sort = FALSE)
> dim(ma_max_split2)
[1] 1399836       7
> dim(ma_max_split1)
[1] 1399836       5
> head(ma_max_split2)
   cell_line y_true                pep_line y_pred_MA y_pred_SA
1:     Bcell      1   VPNAXXXGXXXRGLV;Bcell    0.4897    0.8739
2:   LNT-229      1 RLWQXXXNAXXLLEK;LNT-229    0.9618    0.9451
3:    Mel-12      1  HLFQXXXKXXXKLAA;Mel-12    0.6636    0.7664
4:    Mel-15      1  EVFAXXPPAEXAYAR;Mel-15    0.7910    0.5447
5:    Line.8      1  DVIGXXXKXXXAKSL;Line.8    0.5876    0.7633
6:     RA957      1   HIFAXXXKXXXVQQR;RA957    0.9808    0.7296
                                                                 hla n.hla
1: HLA-A01:01,HLA-A03:01,HLA-B07:02,HLA-B27:05,HLA-C02:02,HLA-C07:01     6
2:                                  HLA-A03:01,HLA-B35:01,HLA-C04:01     3
3:                                  HLA-A01:01,HLA-B08:01,HLA-C07:01     3
4: HLA-A03:01,HLA-A68:01,HLA-B27:05,HLA-B35:03,HLA-C02:02,HLA-C04:01     6
5: HLA-A01:01,HLA-A24:02,HLA-B08:01,HLA-B08:01,HLA-C07:01,HLA-C07:01     6
6: HLA-A02:20,HLA-A68:01,HLA-B35:03,HLA-B39:01,HLA-C04:01,HLA-C07:02     6
> table(ma_max_split2$n.hla)

     3      4      5      6 
248615 151886  43946 955389 
> 
> 
> for(i in min(ma_max_split2$n.hla):max(ma_max_split2$n.hla)){
+   tempds = ma_max_split2[which(ma_max_split2$n.hla==i),]
+   
+   roc_ma_nhla = roc.curve(scores.class0 = tempds$y_pred_MA, 
+                            weights.class0 = tempds$y_true, 
+                            curve=TRUE)
+   roc_ma_nhla
+   
+   roc_sa_nhla = roc.curve(scores.class0 = tempds$y_pred_SA, 
+                            weights.class0 = tempds$y_true, 
+                            curve=TRUE)
+   roc_sa_nhla
+   print(paste0(i, " HLA per cell line: MA AUC = ", round(roc_ma_nhla$auc,3), 
+               ", SA AUC = ", round(roc_sa_nhla$auc, 3)))
+ }
[1] "3 HLA per cell line: MA AUC = 0.982, SA AUC = 0.972"
[1] "4 HLA per cell line: MA AUC = 0.988, SA AUC = 0.983"
[1] "5 HLA per cell line: MA AUC = 0.992, SA AUC = 0.992"
[1] "6 HLA per cell line: MA AUC = 0.992, SA AUC = 0.991"
> 
> # AUC
> roc_ma_split = roc.curve(scores.class0 = ma_max_split1$y_pred_MA, 
+                          weights.class0 = ma_max_split1$y_true, 
+                          curve=TRUE)
> roc_ma_split

  ROC curve

    Area under curve:
     0.9898477 

    Curve for scores from  1e-07  to  1 
    ( can be plotted with plot(x) )

> 
> roc_sa_split = roc.curve(scores.class0 = ma_max_split1$y_pred_SA, 
+                          weights.class0 = ma_max_split1$y_true, 
+                          curve=TRUE)
> roc_sa_split

  ROC curve

    Area under curve:
     0.9871026 

    Curve for scores from  0  to  0.9999 
    ( can be plotted with plot(x) )

> 
> # PPV
> temp1 <- ma_max_split[with(ma_max_split,order(-y_pred_MA)),]
> hits = table(ma_max_split$y_true)[2][[1]]
> temp2 = temp1[1:hits,]
> dim(temp2)
[1] 95357     5
> 
> ppv_sa = sum(temp2$y_true)/hits
> ppv_sa
[1] 0.8167308
> 
> 
> # ---------------------------------------------------------------------------
> # SA ROC - MHCflurry-2.0 test data prediction
> # ---------------------------------------------------------------------------
> sa_res = "../../../results/test_data/MHCflurry2/SA_MHCflurry2_800_nocw_full_Jul26_test_pred_all.txt.gz"
> sa = fread(sa_res)
> sa_max = sa[, .(max(y_pred_mix)), by = .(y_true, peptide)]
> dim(sa_max)
[1] 2678188       3
> colnames(sa_max)[3] = "y_pred"
> 
> # AUC
> roc_sa = roc.curve(scores.class0 = sa_max$y_pred, weights.class0 = sa_max$y_true, 
+                    curve=TRUE)
> roc_sa

  ROC curve

    Area under curve:
     0.8650917 

    Curve for scores from  0  to  0.9999 
    ( can be plotted with plot(x) )

> 
> # PPV
> temp1 <- sa_max[with(sa_max,order(-y_pred)),]
> hits = table(sa_max$y_true)[2][[1]]
> temp2 = temp1[1:hits,]
> dim(temp2)
[1] 25309     3
> 
> ppv_sa = sum(temp2$y_true)/hits
> ppv_sa
[1] 0.2932949
> 
> # ---------------------------------------------------------------------------
> # aggregate 4 MA ROC MHCflurry-2.0 results 
> # ---------------------------------------------------------------------------
> 
> # Extract files 
> dir0 = "../../../results/test_data/MHCflurry2/"
> fall = list.files(dir0, 
+                   pattern = "test_pred_all.txt.gz")
> fall = fall[grep("800",fall)]
> fall = fall[grep("MA",fall)]
> fall = fall[-grep("split4",fall)]
> fall
[1] "MA_MHCflurry2_800_nobal_nocw_bs_32_lr_0.001_e_10_layer_1_dropout_0.5_new_pi_weight_0.5_decriter_2_split0_iter10_Aug2_test_pred_all.txt.gz"
[2] "MA_MHCflurry2_800_nobal_nocw_bs_32_lr_0.001_e_10_layer_1_dropout_0.5_new_pi_weight_0.5_decriter_2_split1_iter10_Aug5_test_pred_all.txt.gz"
[3] "MA_MHCflurry2_800_nobal_nocw_bs_32_lr_0.001_e_10_layer_1_dropout_0.5_new_pi_weight_0.5_decriter_2_split2_iter10_Aug5_test_pred_all.txt.gz"
[4] "MA_MHCflurry2_800_nobal_nocw_bs_32_lr_0.001_e_10_layer_1_dropout_0.5_new_pi_weight_0.5_decriter_2_split3_iter10_Aug5_test_pred_all.txt.gz"
> #combine datasets across splits (after taking max of each peptide)
> ma_max = NULL 
> for(f in fall){
+   print("*-------------------------------------------------------------------------*")
+   it = str_split(f, "_")[[1]][22]
+   print(it)
+   p_pred = fread(paste0(dir0, f))
+   
+   dim(p_pred)
+   head(p_pred)
+   
+   d50 = p_pred[, .(max(y_pred_mix)), by = .(y_true, peptide)]
+   colnames(d50)[3] = "y_pred_mix"
+   head(d50)
+   print(dim(d50))
+   # Note: this dimension is correct if remove duplicates within cell line 
+   
+   #create cell line
+   d50$cell_line = sub("\\;.*", "", d50$peptide)
+   head(d50)
+   
+   # ---------------------------------------------------------------------------
+   # Combine all split/configs to one dataset
+   # ---------------------------------------------------------------------------
+   colnames(d50)[which(colnames(d50)=="y_pred_mix")] = paste("y_pred_mix",
+                                                             str_split(f, "_")[[1]][3],
+                                                             str_split(f, "_")[[1]][22], 
+                                                             sep = "_")
+   colnames(d50)[which(colnames(d50)=="hla")] = paste("hla",
+                                                             str_split(f, "_")[[1]][3],
+                                                             str_split(f, "_")[[1]][22], 
+                                                             sep = "_")
+   if(str_split(f, "_")[[1]][22]=="split0"){
+     ma_max = d50
+     print(dim(ma_max))
+   }else{
+     ma_max = merge(ma_max, d50, 
+                     by = c("peptide", "y_true", "cell_line"))
+     print(dim(ma_max))
+   }
+ }
[1] "*-------------------------------------------------------------------------*"
[1] "split0"
[1] 2678188       3
[1] 2678188       4
[1] "*-------------------------------------------------------------------------*"
[1] "split1"
[1] 2678188       3
[1] 2678188       5
[1] "*-------------------------------------------------------------------------*"
[1] "split2"
[1] 2678188       3
[1] 2678188       6
[1] "*-------------------------------------------------------------------------*"
[1] "split3"
[1] 2678188       3
[1] 2678188       7
> head(ma_max)
                            peptide y_true        cell_line
1: 10-002-S1-TISSUE;AAAAXXQRNXXASSY      0 10-002-S1-TISSUE
2: 10-002-S1-TISSUE;AAAAXXXAAXXAAYG      0 10-002-S1-TISSUE
3: 10-002-S1-TISSUE;AAAAXXXAKXXPVAT      0 10-002-S1-TISSUE
4: 10-002-S1-TISSUE;AAAAXXXAXXXAAAA      0 10-002-S1-TISSUE
5: 10-002-S1-TISSUE;AAAAXXXAXXXAASA      0 10-002-S1-TISSUE
6: 10-002-S1-TISSUE;AAAAXXXIEXXAAAK      0 10-002-S1-TISSUE
   y_pred_mix_800_split0 y_pred_mix_800_split1 y_pred_mix_800_split2
1:             0.3317000             2.247e-01             0.3958000
2:             0.0002336             2.068e-05             0.0007747
3:             0.0294800             5.027e-02             0.1113000
4:             0.4010000             3.333e-01             0.5401000
5:             0.4829000             4.066e-01             0.5937000
6:             0.0716800             4.886e-03             0.0725000
   y_pred_mix_800_split3
1:             0.1713000
2:             0.0006662
3:             0.2220000
4:             0.3338000
5:             0.4385000
6:             0.1249000
> table(ma_max$y_true)

      0       1 
2652879   25309 
> ma_max = as.data.frame(ma_max)
> 
> #aggregate across 4 splits
> ma_max$ag_score = rowMeans(ma_max[, startsWith(colnames(ma_max), "y_pred_mix")])
> 
> # calculate ROC curve 
> roc_ma = roc.curve(scores.class0 = ma_max$ag_score, weights.class0 = ma_max$y_true, 
+                  curve=TRUE)
> roc_ma

  ROC curve

    Area under curve:
     0.9096117 

    Curve for scores from  0  to  0.9998 
    ( can be plotted with plot(x) )

> 
> # PPV
> 
> # PPV
> temp1 <- ma_max[with(ma_max,order(-ag_score)),]
> hits = table(ma_max$y_true)[2][[1]]
> temp2 = temp1[1:hits,]
> dim(temp2)
[1] 25309     8
> 
> ppv_ma = sum(temp2$y_true)/hits
> ppv_ma
[1] 0.3781659
> 
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS High Sierra 10.13.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] stringr_1.4.0     PRROC_1.3.1       data.table_1.12.2

loaded via a namespace (and not attached):
[1] compiler_3.6.1    magrittr_1.5      tools_3.6.1       R.methodsS3_1.8.1
[5] stringi_1.4.3     R.utils_2.10.1    R.oo_1.24.0      
> q(save="no")
> proc.time()
   user  system elapsed 
198.370  18.061 210.648 
